<?php

/**
 * @file
 * Primary module hooks for Mail Theme module.
 */

use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\DeprecationHelper;

/**
 * Implements hook_theme().
 */
function mail_theme_theme() {
  $theme['mail_theme_wrapper'] = [
    'variables' => [
      'body' => NULL,
      'cta_text' => NULL,
      'cta_url' => NULL,
      'site_name' => NULL,
      'show_header' => TRUE,
      'show_logo' => TRUE,
      'width' => '580px',
      'logo_width' => '100%',
      'logo_height' => 'auto',
      'body_bg' => '#f6f6f6',
      'content_bg' => '#ffffff',
      'content_color' => '#3d3d3d',
      'header_bg' => '#ffffff',
      'header_color' => '#000000',
      'header_logo_padding' => '24px',
      'header_text_padding' => '10px',
      'header_width' => 'auto',
      'primary_color' => NULL,
      'secondary_color' => NULL,
    ],
    'file' => 'mail_theme.page.inc',
  ];
  return $theme;
}

function mail_theme_mail_alter(&$message) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  if (!empty($message['body'])) {
    /** @var \Drupal\Core\Render\RendererInterface $renderer */
    $renderer = \Drupal::service('renderer');
    if (is_array($message['body'])) {
      foreach ($message['body'] as &$value) {
        if ($value instanceof MarkupInterface) {
          $value = ['#markup' => $value];
        }
      }
    }

    // Account for various senders.
    $content = '';
    if (isset($message['body'][0]) && is_string($message['body'][0])) {
      $content = html_entity_decode($message['body'][0]);
    } else if (isset($message['body'][0])) {
      $content = $message['body'][0];
    } else {
      $content = $message['body'];
    }

    $body = [
      '#theme' => 'mail_theme_wrapper',
      '#body' => $content,
      '#show_header' => $message['params']['show_header'] ?? TRUE,
      '#show_logo' => $message['params']['show_logo'] ?? TRUE,
      '#width' => $message['params']['width'] ?? '580px',
      '#cta' => $message['cta'] ?? NULL,
      '#cta_text' => $message['params']['cta_text'] ?? NULL,
      '#cta_url' => $message['params']['cta_url'] ?? NULL,
    ];
    $message['body'] = [DeprecationHelper::backwardsCompatibleCall(
      currentVersion: \Drupal::VERSION,
      deprecatedVersion: '10.3',
      currentCallable: fn() => $renderer->renderInIsolation($body),
      deprecatedCallable: fn() => $renderer->renderPlain($body),
    )];
  }
}
